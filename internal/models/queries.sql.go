// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package models

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, content, author_id)
VALUES ($1, $2, $3)
RETURNING id, title, content, author_id, created_at, updated_at
`

type CreatePostParams struct {
	Title    string        `json:"title"`
	Content  string        `json:"content"`
	AuthorID sql.NullInt32 `json:"author_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Content, arg.AuthorID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, hashed_password)
VALUES ($1, $2, $3)
RETURNING id, username, email, created_at, updated_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

type CreateUserRow struct {
	ID        int32        `json:"id"`
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePostByAuthor = `-- name: DeletePostByAuthor :exec
DELETE FROM posts
WHERE id = $1 AND author_id = $2
`

type DeletePostByAuthorParams struct {
	ID       int32         `json:"id"`
	AuthorID sql.NullInt32 `json:"author_id"`
}

func (q *Queries) DeletePostByAuthor(ctx context.Context, arg DeletePostByAuthorParams) error {
	_, err := q.db.ExecContext(ctx, deletePostByAuthor, arg.ID, arg.AuthorID)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, title, content, author_id, created_at, updated_at
FROM posts
WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, hashed_password, created_at, updated_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, content, author_id, created_at updated_at
FROM posts
ORDER BY created_at DESC
`

type ListPostsRow struct {
	ID        int32         `json:"id"`
	Title     string        `json:"title"`
	Content   string        `json:"content"`
	AuthorID  sql.NullInt32 `json:"author_id"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
}

func (q *Queries) ListPosts(ctx context.Context) ([]ListPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsRow{}
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users SET hashed_password = $2
WHERE username = $1
`

type UpdatePasswordParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Username, arg.HashedPassword)
	return err
}

const updatePostByAuthor = `-- name: UpdatePostByAuthor :exec
UPDATE posts
SET title = $2, content = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND author_id = $4
`

type UpdatePostByAuthorParams struct {
	ID       int32         `json:"id"`
	Title    string        `json:"title"`
	Content  string        `json:"content"`
	AuthorID sql.NullInt32 `json:"author_id"`
}

func (q *Queries) UpdatePostByAuthor(ctx context.Context, arg UpdatePostByAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updatePostByAuthor,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.AuthorID,
	)
	return err
}
